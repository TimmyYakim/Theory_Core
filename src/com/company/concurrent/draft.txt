
Псевдопараллельность - режим работы, при котором кол-во потоков приложения меньше числа ядер процессора.
При этом несколько потоков делят процессороное время. При этом переключается контекст между ними.
При большом кол-ве потоков частое переключение контекста => большие затраты на переключение контекста.

Состояния потока:
1. new
2. runnable
3. running
4. not runnable: blocked, waiting // waiting (планировщик), locked (сам поток)
new start() => runnable
running yield() = > runnable // предоставляет возможность более приоритетному потоку выполниться

Монитор - объект, хранящий в единицу времени только один поток. Защита ресурсов от использования
несколькими потоками.

Некоторые примитивы (long, double) занимают несколько машинных слов. Чтение их происходит в единицу времени
по машинному слову. Допустим один поток начинает читать первую часть примитива, а второй перезаписал вторую часть.
Чтобы этого избежать вводятся атомарные операции, данные кэшируются.

Основные св-ва модели памяти:
atomicity // атомарность
visibility // видимость
ordering // порядок

Процесс включает в себя несколько потоков.

Создать поток можно двумя способами:
implements Runnable
extends Thread (Thread implements Runnable)
Разница в методах.
Через Callable можно пробросить исключение.

getName - имя потока исполнения
getPriority - приоритет потока
isAlive - выполняется ли поток (принадлежит состоянию любому, кроме new и dead)
join - ожидает завершение потока
run - задает точку входа в поток выполнения
sleep - приостановка потока на заданное время
start - вызывает run()


Callable аналогичен Runnable, но с возвратом значения и пробросом исключения
Callable возвращает в основном отсроченные операции
Future хранит результат асинхронного вычисления

Синхронизация потоков
Каждый объект в Java имеет свой монитор с операциями:
- monitorenter: захват монитора
- monitorexit: освобождение монитора
- wait: перемещение текущего потока в ожидание и ожидание notify()
- notify(all): пробуждение одного или всех потоков, которые в ожидании


init
based
thin
fat

synchronized(object_reference) {
    //
}
trylock
семафоры

lifelock
deadlock
race


Concurrent:
concurrent collections
queues
synchronizers
executors
locks
atomics


